const fs = require("fs");
const path = require("path");
const os = require("os");
const { spawn } = require("child_process");
const { Command } = require("commander");
const { fetch } = require("undici");
const chalk = require("chalk");
const inquirer = require("inquirer");
const { success, log, warn, error, hint, actionRunner, commandDescriptions } = require("../parser");
const { version } = require("../../package.json");

/**
 * Check if the CLI was installed via npm
 */
const isInstalledViaNpm = () => {
    try {
        // Check if we're in a global npm installation
        const execPath = process.argv[0];
        const scriptPath = process.argv[1];
        
        // Common indicators of npm global installation
        if (scriptPath.includes('node_modules') && scriptPath.includes('appwrite-cli')) {
            return true;
        }
        
        // Check if npm is available and appwrite-cli is installed globally
        return false;
    } catch (e) {
        return false;
    }
};

/**
 * Check if the CLI was installed via Homebrew
 */
const isInstalledViaHomebrew = () => {
    try {
        const scriptPath = process.argv[1];
        return scriptPath.includes('/opt/homebrew/') || scriptPath.includes('/usr/local/Cellar/');
    } catch (e) {
        return false;
    }
};

/**
 * Get the latest version from npm registry
 */
const getLatestVersion = async () => {
    try {
        const response = await fetch('https://registry.npmjs.org/{{ language.params.npmPackage|caseDash }}/latest');
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        const data = await response.json();
        return data.version;
    } catch (e) {
        throw new Error(`Failed to fetch latest version: ${e.message}`);
    }
};

/**
 * Compare versions using semantic versioning
 */
const compareVersions = (current, latest) => {
    const currentParts = current.split('.').map(Number);
    const latestParts = latest.split('.').map(Number);
    
    for (let i = 0; i < Math.max(currentParts.length, latestParts.length); i++) {
        const currentPart = currentParts[i] || 0;
        const latestPart = latestParts[i] || 0;
        
        if (latestPart > currentPart) return 1;  // Latest is newer
        if (latestPart < currentPart) return -1; // Current is newer
    }
    
    return 0; // Same version
};

/**
 * Execute command and return promise
 */
const execCommand = (command, args = [], options = {}) => {
    return new Promise((resolve, reject) => {
        const child = spawn(command, args, { 
            stdio: 'inherit',
            shell: true,
            ...options 
        });
        
        child.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`Command failed with exit code ${code}`));
            }
        });
        
        child.on('error', (err) => {
            reject(err);
        });
    });
};

/**
 * Update via npm
 */
const updateViaNpm = async () => {
    log("Updating via npm...");
    try {
        await execCommand('npm', ['install', '-g', '{{ language.params.npmPackage|caseDash }}@latest']);
        success("Successfully updated {{ language.params.executableName|caseLower }} via npm!");
        hint("Run '{{ language.params.executableName|caseLower }} --version' to verify the new version.");
    } catch (e) {
        error(`Failed to update via npm: ${e.message}`);
        hint("Try running: npm install -g {{ language.params.npmPackage|caseDash }}@latest");
    }
};

/**
 * Update via Homebrew
 */
const updateViaHomebrew = async () => {
    log("Updating via Homebrew...");
    try {
        await execCommand('brew', ['upgrade', '{{ language.params.executableName|caseLower }}']);
        success("Successfully updated {{ language.params.executableName|caseLower }} via Homebrew!");
        hint("Run '{{ language.params.executableName|caseLower }} --version' to verify the new version.");
    } catch (e) {
        error(`Failed to update via Homebrew: ${e.message}`);
        hint("Try running: brew upgrade {{ language.params.executableName|caseLower }}");
    }
};

/**
 * Update via installation script
 */
const updateViaScript = async () => {
    log("Updating via installation script...");
    const platform = os.platform();
    
    try {
        if (platform === 'win32') {
            // Windows PowerShell script
            await execCommand('powershell', ['-Command', 'iwr -useb https://appwrite.io/cli/install.ps1 | iex']);
        } else {
            // Linux/macOS bash script
            await execCommand('sh', ['-c', 'wget -q https://appwrite.io/cli/install.sh -O - | /bin/bash']);
        }
        success("Successfully updated {{ language.params.executableName|caseLower }} via installation script!");
        hint("Run '{{ language.params.executableName|caseLower }} --version' to verify the new version.");
    } catch (e) {
        error(`Failed to update via installation script: ${e.message}`);
        if (platform === 'win32') {
            hint("Try running: iwr -useb https://appwrite.io/cli/install.ps1 | iex");
        } else {
            hint("Try running: wget -q https://appwrite.io/cli/install.sh -O - | /bin/bash");
        }
    }
};

/**
 * Show manual update instructions
 */
const showManualInstructions = (latestVersion) => {
    log("Manual update options:");
    console.log("");
    
    log(`${chalk.bold("Option 1: NPM")}`);
    console.log(`  npm install -g {{ language.params.npmPackage|caseDash }}@latest`);
    console.log("");
    
    log(`${chalk.bold("Option 2: Homebrew (macOS)")}`);
    console.log(`  brew upgrade {{ language.params.executableName|caseLower }}`);
    console.log("");
    
    log(`${chalk.bold("Option 3: Installation Script")}`);
    if (os.platform() === 'win32') {
        console.log(`  iwr -useb https://appwrite.io/cli/install.ps1 | iex`);
    } else {
        console.log(`  wget -q https://appwrite.io/cli/install.sh -O - | /bin/bash`);
    }
    console.log("");
    
    log(`${chalk.bold("Option 4: Download Binary")}`);
    console.log(`  Visit: https://github.com/appwrite/sdk-for-cli/releases/tag/${latestVersion}`);
    console.log("");
};

/**
 * Main update function
 */
const updateCli = async ({ manual } = {}) => {
    log(`Current version: ${chalk.bold(version)}`);
    
    try {
        log("Checking for updates...");
        const latestVersion = await getLatestVersion();
        
        const comparison = compareVersions(version, latestVersion);
        
        if (comparison === 0) {
            success(`You're already running the latest version (${chalk.bold(version)})!`);
            return;
        } else if (comparison < 0) {
            warn(`You're running a newer version (${chalk.bold(version)}) than the latest released version (${chalk.bold(latestVersion)}).`);
            hint("This might be a pre-release or development version.");
            return;
        }
        
        log(`Latest version: ${chalk.bold(latestVersion)}`);
        log(`${chalk.green('â†’')} A new version is available!`);
        console.log("");
        
        if (manual) {
            showManualInstructions(latestVersion);
            return;
        }
        
        // Auto-detect installation method and suggest appropriate update
        if (isInstalledViaNpm()) {
            const answer = await inquirer.prompt([{
                type: 'confirm',
                name: 'update',
                message: 'Update via npm?',
                default: true
            }]);
            
            if (answer.update) {
                await updateViaNpm();
            }
        } else if (isInstalledViaHomebrew()) {
            const answer = await inquirer.prompt([{
                type: 'confirm',
                name: 'update',
                message: 'Update via Homebrew?',
                default: true
            }]);
            
            if (answer.update) {
                await updateViaHomebrew();
            }
        } else {
            // Unknown installation method - show options
            const answer = await inquirer.prompt([{
                type: 'list',
                name: 'method',
                message: 'How would you like to update?',
                choices: [
                    { name: 'NPM (npm install -g)', value: 'npm' },
                    { name: 'Homebrew (macOS)', value: 'homebrew' },
                    { name: 'Installation Script', value: 'script' },
                    { name: 'Show manual instructions', value: 'manual' }
                ]
            }]);
            
            switch (answer.method) {
                case 'npm':
                    await updateViaNpm();
                    break;
                case 'homebrew':
                    await updateViaHomebrew();
                    break;
                case 'script':
                    await updateViaScript();
                    break;
                case 'manual':
                    showManualInstructions(latestVersion);
                    break;
            }
        }
        
    } catch (e) {
        error(`Failed to check for updates: ${e.message}`);
        hint("You can manually check for updates at: https://github.com/appwrite/sdk-for-cli/releases");
    }
};

const update = new Command("update")
    .description("Update the {{ spec.title|caseUcfirst }} CLI to the latest version")
    .option("--manual", "Show manual update instructions instead of auto-updating")
    .action(actionRunner(updateCli));

module.exports = {
    update
};