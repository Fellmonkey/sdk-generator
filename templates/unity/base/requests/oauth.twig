            var project = _client.Config.GetValueOrDefault("project");
            apiParameters["project"] = project;

            var queryString = apiParameters.ToQueryString();
            var authUrl = $"{_client.Endpoint}{apiPath}?{queryString}";

            var callbackUri = await WebAuthComponent.Authenticate(authUrl);
            
            var query = HttpUtility.ParseQueryString(callbackUri.Query);
            var secret = query.Get("secret");
            var key = query.Get("key");
            var callbackDomain = query.Get("domain"); // Get domain from callback

            if (string.IsNullOrEmpty(secret) || string.IsNullOrEmpty(key))
            {
                var error = query.Get("error") ?? "Unknown error";
                throw new AppwriteException($"Failed to get authentication credentials from callback. Error: {error}");
            }

            // Use domain from callback if available, otherwise fallback to endpoint host
            var domain = !string.IsNullOrEmpty(callbackDomain) ? callbackDomain : new Uri(_client.Endpoint).Host;

            // Create a Set-Cookie header format and parse it
            // This ensures consistent cookie processing with server responses
            var setCookieHeader = $"{key}={secret}; Path=/; Domain={domain}; Secure; HttpOnly; Max-Age={30 * 24 * 60 * 60}";
            Debug.Log($"Setting cookie: {setCookieHeader} for domain: {domain}");
            _client.CookieContainer.ParseSetCookieHeader(setCookieHeader, domain.StartsWith(".") ? domain.Substring(1) : domain);

#if UNITY_EDITOR
            Debug.LogWarning("[Appwrite] OAuth authorization in Editor: you can open and authorize, but cookies cannot be obtained. The session will not be set.");
#endif
